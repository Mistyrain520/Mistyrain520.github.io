<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>有一天我会哭</title>
    <link href="/2023/08/13/%E6%9C%89%E4%B8%80%E5%A4%A9%E6%88%91%E4%BC%9A%E5%93%AD/"/>
    <url>/2023/08/13/%E6%9C%89%E4%B8%80%E5%A4%A9%E6%88%91%E4%BC%9A%E5%93%AD/</url>
    
    <content type="html"><![CDATA[<p align="center"><b style="font-size:25px">有一天我会哭</b></p><p align="right">陈随想</p><p align="center">有一天我会哭</p><p align="center">眼角沾满了珍珠</p><p align="center">透明了往故</p><p align="center">撩起烟雨</p><p align="center">半遮半捂</p><br><p align="center">有一天我在哭</p><p align="center">泪眼看桐梧</p><p align="center">细数过往鸟语</p><p align="center">捧簇淡菊</p><p align="center">年少不复</p><br><p align="center">有一天我会禁不住哭</p><p align="center">那些古老的阳光浴</p><p align="center">那轻狂的笑脸颠覆</p><p align="center">我扬起柳枝挥去</p><p align="center">残留黄昏的霞楚</p><br><p align="left"><b style="font-size:18px">2023-08-13 跋</b></p>小时候有段时间爱写诗。小时候有段时间爱哭。小时候有段时间爱发呆。所以有了此诗。大约记得此诗作于2011年。那是我还是个高中生。某天下午有一节体育课，在课上自由活动的时间里，我坐在某处的楼梯望着天空发呆，思绪万千，有点忍不住眼里硬是多了了几滴泪光。遂作此诗。]]></content>
    
    
    
    <tags>
      
      <tag>诗歌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo（坑一）</title>
    <link href="/2023/08/12/hexo%EF%BC%88%E5%9D%91%E4%B8%80%EF%BC%89/"/>
    <url>/2023/08/12/hexo%EF%BC%88%E5%9D%91%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>转载来自<a href="https://rs11.xyz/articles/2.html">https://rs11.xyz/articles/2.html</a><br>“hexo d” 部署的时候遇到权限问题，报错无法读取远程仓库</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>sudo rm -rf .deploy_git<br><span class="hljs-bullet">- </span>hexo clean<br><span class="hljs-bullet">- </span>hexo g<br><span class="hljs-bullet">- </span>hexo d<br></code></pre></td></tr></table></figure><p>访问4040，没有配置CNAME<br>方式一：github  setting  Pages Custom domain<br>方式二： 在source下新建CNAME写入域名，重新hexo g,hexo d，会生成文件在public下</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web性能</title>
    <link href="/2023/08/12/web%E6%80%A7%E8%83%BD/"/>
    <url>/2023/08/12/web%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是内存泄露"><a href="#什么是内存泄露" class="headerlink" title="什么是内存泄露"></a>什么是内存泄露</h4><p>不再用到的对象内存，没有及时被回收时,就会产生内存泄露</p><h4 id="常见的内存泄漏"><a href="#常见的内存泄漏" class="headerlink" title="常见的内存泄漏"></a>常见的内存泄漏</h4><ul><li>不正常闭包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1000</span>).fill(<span class="hljs-string">&#x27;isboyjc&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(test)<br>    <span class="hljs-keyword">return</span> test<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> fn2Child = fn2()<br>fn2Child()<br><span class="hljs-comment">//return 的函数中存在函数 fn2 中的 test 变量引用，所以 test 并不会被回收，也就造成了内存泄漏,避免这个问题，后续添加fn2Child = null即可解决</span><br>fn2Child = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></li><li>隐式全局变量<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">// 没有声明从而制造了隐式全局变量test1</span><br>  test1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Array</span>(<span class="hljs-number">1000</span>).fill(<span class="hljs-string">&#x27;isboyjc1&#x27;</span>)<br>  <br>  <span class="hljs-comment">// 函数内部this指向window，制造了隐式全局变量test2</span><br>  this.test2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Array</span>(<span class="hljs-number">1000</span>).fill(<span class="hljs-string">&#x27;isboyjc2&#x27;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>)</span><br></code></pre></td></tr></table></figure></li><li>游离DOM引用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;li3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#root&#x27;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">let</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#ul&#x27;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">let</span> li3 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#li3&#x27;</span>)</span><br><span class="javascript">  </span><br><span class="javascript">  <span class="hljs-comment">// 由于ul变量存在，整个ul及其子元素都不能GC</span></span><br><span class="javascript">  root.removeChild(ul)</span><br><span class="javascript">  </span><br><span class="javascript">  <span class="hljs-comment">// 虽置空了ul变量，但由于li3变量引用ul的子节点，所以ul元素依然不能被GC</span></span><br><span class="javascript">  ul = <span class="hljs-literal">null</span></span><br><span class="javascript">  </span><br><span class="javascript">  <span class="hljs-comment">// 已无变量引用，此时可以GC</span></span><br><span class="javascript">  li3 = <span class="hljs-literal">null</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>遗忘的定时器、监听器、监听者模式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取数据</span><br><span class="hljs-keyword">let</span> someResource = getData()<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> node = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;Node&#x27;</span>)<br><span class="hljs-keyword">if</span>(node) &#123;<br>    node.innerHTML = <span class="hljs-built_in">JSON</span>.stringify(someResource))<br>&#125;<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-comment">//setInterval 没有结束前，回调函数里的变量以及回调函数本身都无法被回收。</span><br><span class="hljs-comment">//什么才叫结束呢？也就是调用了 clearInterval。如果没有被 clear 掉的话，就会造成内存泄漏。不仅如此，如果回调函数没有被回收，那么回调函数内依赖的变量也没法被回收。所以在上例中，someResource 就没法被回收。</span><br></code></pre></td></tr></table></figure></li><li>遗忘的Map、Set对象<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> obj是一个强引用，对象存于内存，可用<br>let obj = &#123;id: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-regexp">//</span> 重写obj引用<br>obj = null <br><span class="hljs-regexp">//</span> 对象从内存移除，回收 &#123;id: <span class="hljs-number">1</span>&#125; 对象<br></code></pre></td></tr></table></figure><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 1&#125;</span><br><span class="hljs-string">let</span> user = &#123;<span class="hljs-attribute">info</span>: obj&#125;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([obj])<br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[obj, <span class="hljs-string">&#x27;hahaha&#x27;</span>]])<br><br><span class="hljs-comment">// 重写obj</span><br>obj = <span class="hljs-literal">null</span> <br><br><span class="hljs-built_in">console</span>.log(user.info) <span class="hljs-comment">// &#123;id: 1&#125;</span><br><span class="hljs-built_in">console</span>.log(set)<br><span class="hljs-built_in">console</span>.log(map)<br>&lt;!-- 重写 obj 以后，&#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 1&#125; 依然会存在于内存中，因为 user</span> 对象以及后面的 set/map 都强引用了它，<span class="hljs-built_in">Set</span>/<span class="hljs-built_in">Map</span>、对象、数组对象等都是强引用，所以我们仍然可以获取到 &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 1&#125; ，我们想要清除那就只能重写所有引用将其置空了。 --&gt;</span><br></code></pre></td></tr></table></figure></li><li>未清理的Console输出<h4 id="内存泄漏排查、定位与修复"><a href="#内存泄漏排查、定位与修复" class="headerlink" title="内存泄漏排查、定位与修复"></a>内存泄漏排查、定位与修复</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> click = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#click&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> content = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#content&quot;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">let</span> arr = []</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closures</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1000</span>).fill(<span class="hljs-string">&#x27;isboyjc&#x27;</span>)</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> test</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    click.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      arr.push(closures())</span><br><span class="javascript">      arr.push(closures())</span><br><span class="javascript"></span><br><span class="javascript">      content.innerHTML = arr.length</span><br><span class="javascript">    &#125;);</span><br><span class="javascript"></span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ol><li>快照</li></ol><ul><li>Summary：按照构造函数进行分组，捕获对象和其使用内存的情况，可理解为一个内存摘要，用于跟踪定位DOM节点的内存泄漏</li><li>Comparison：对比某个操作前后的内存快照区别，分析操作前后内存释放情况等，便于确认内存是否存在泄漏及造成原因</li><li>Containment：探测堆的具体内容，提供一个视图来查看对象结构，有助分析对象引用情况，可分析闭包及更深层次的对象分析</li><li>Statistics：统计视图</li></ul><ol start="2"><li>Summary</li></ol><ul><li>Constructor：显示所有的构造函数，点击每一个构造函数可以查看由该构造函数创建的所有对象</li><li>Distance：显示通过最短的节点路径到根节点的距离，引用层级</li><li>Shallow Size：显示对象所占内存，不包含内部引用的其他对象所占的内存</li><li>Retained Size：显示对象所占的总内存，包含内部引用的其他对象所占的内存</li></ul><ol start="3"><li>Comparison</li></ol><ul><li>New：新建了多少个对象</li><li>Deleted：回收了多少个对象</li><li>Delta：新建的对象数 减去 回收的对象数</li></ul><ol start="4"><li><a href="https://developer.chrome.com/docs/devtools/performance/">performance工具</a><h4 id="三个重要的名词"><a href="#三个重要的名词" class="headerlink" title="三个重要的名词"></a>三个重要的名词</h4></li></ol><ul><li><p>内存泄露</p></li><li><p>内存膨胀</p></li><li><p>频繁GC</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">GC</span> 执行的特别频繁，一般出现在频繁使用大的临时变量导致新生代空间被装满的速度极快，而每次新生代装满时就会触发 <span class="hljs-built_in">GC</span>，频繁 <span class="hljs-built_in">GC</span> 同样会导致页面卡顿，想要避免的话就不要搞太多的临时变量，因为临时变量不用了就会被回收，这和我们内存泄漏中说避免使用全局变量冲突，其实，只要把握好其中的度，不太过分就 OK。<br></code></pre></td></tr></table></figure><h4 id="前端web性能指标"><a href="#前端web性能指标" class="headerlink" title="前端web性能指标"></a>前端web性能指标</h4><p>指标有点多，我们关注核心的几个</p></li><li><p>FCP (First Contentful Paint)首次内容绘制</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">浏览器首次绘制来自DOM的内容的时间，内容必须包括文本，图片，非白色的<span class="hljs-selector-tag">canvas</span>或svg，也包括带有正在加载中的web字体文本。这是用户第一次看到的内容。<br><br>注意：performance<span class="hljs-selector-class">.timing</span>已过时，无法获取所有异步加载资源。现在不适用了。<br></code></pre></td></tr></table></figure></li><li><p>LCP (Largest Contentful Paint)最大内容绘制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可视区域中最大的内容元素呈现到屏幕上的时间，用以估算页面的主要内容对用户的可见时间。img图片，video元素的封面，通过url加载到的北京，文本节点等，为了提供更好的用户体验，网站应该在2.5s以内或者更短的时间最大内容绘制。</span><br><span class="hljs-keyword">new</span> PerformanceObserver(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.getEntries()) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;LCP candidate:&#x27;</span>, entry.startTime, entry);<br>    &#125;<br>&#125;).observe(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;largest-contentful-paint&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>FID(First Input Delay), 可用<a href="https://web.dev/tbt/?utm_source=devtools">TBT总阻塞时长</a>代替衡量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//首次输入延迟，从用户第一次与页面进行交互到浏览器实际能够响应该交互的时间，输入延迟是因为浏览器的主线程正忙于做其他事情，所以不能响应用户，发生这种情况的一个常见原因是浏览器正忙于解析和执行应用程序加载的大量计算的JavaScript。</span><br><span class="hljs-keyword">new</span> PerformanceObserver(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.getEntries()) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;FID:&#x27;</span>, entry.processingStart - entry.startTime);<br>    &#125;<br>&#125;).observe(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;first-input&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>CLS (Cumulative Layout Shift)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//累计布局位移，CLS会测量在页面整个生命周期中发生的每个意外的布局移位的所有单独布局移位分数的总和，他是一种保证页面的视觉稳定性从而提升用户体验的指标方案。</span><br>用人话来说就是当点击页面中的某个元素的时候，突然布局变了，手指点到了其它位置。比如想点击页面的链接，突然出现了一个banner。这种情况可能是因为尺寸未知的图像或者视频。<br><span class="hljs-keyword">let</span> cls = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">new</span> PerformanceObserver(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.getEntries()) &#123;<br>        <span class="hljs-keyword">if</span> (!entry.hadRecentInput) &#123;<br>            cls += entry.value;<br>        &#125;<br>    &#125;<br>&#125;).observe(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;layout-shift&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><h4 id="常用优化手法"><a href="#常用优化手法" class="headerlink" title="常用优化手法"></a>常用优化手法</h4></li><li><p>减少 HTTP 请求</p></li><li><p>资源压缩</p></li><li><p>惰性加载<br><a href="https://juejin.cn/post/7252684645979111461#heading-6">给你十万条数据，给我顺滑的渲染出来！</a></p></li><li><p>服务端渲染</p></li><li><p>将 CSS 放在文件头部，JavaScript 文件放在底部</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">CSS 执行会阻塞渲染，阻止 <span class="hljs-keyword">JS </span>执行<br><span class="hljs-keyword">JS </span>加载和执行会阻塞 HTML 解析，阻止 CSSOM 构建<br></code></pre></td></tr></table></figure></li><li><p>缓存</p></li><li><p>减少重绘重排</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">----什么操作会导致重排？<br>添加或删除可见的 DOM 元素<br>元素位置改变<br>元素尺寸改变<br>内容改变<br>浏览器窗口尺寸改变<br>----如何减少重排重绘？<br>用 JavaScript 修改样式时，最好不要直接写样式，而是替换 <span class="hljs-keyword">class</span> 来改变样式。<br>如果要对 <span class="hljs-symbol">DOM</span> 元素执行一系列操作，可以将 <span class="hljs-symbol">DOM</span> 元素脱离文档流，修改完成后，再将它带回文档。推荐使用隐藏元素（<span class="hljs-symbol">display:<span class="hljs-symbol">none</span></span>）或文档碎片（<span class="hljs-symbol">DocumentFragement</span>），都能很好的实现这个方案。<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go``中使用占位符、net用法</title>
    <link href="/2023/08/12/go-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8D%A0%E4%BD%8D%E7%AC%A6%E3%80%81net%E7%94%A8%E6%B3%95/"/>
    <url>/2023/08/12/go-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8D%A0%E4%BD%8D%E7%AC%A6%E3%80%81net%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="go-中使用占位符、net用法"><a href="#go-中使用占位符、net用法" class="headerlink" title="go``中使用占位符、net用法"></a>go``中使用占位符、net用法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-comment">//&#123;&#123;.Itemname&#125;&#125;两个中括号</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;strconv&quot;</span><br>    <span class="hljs-string">&quot;text/template&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br><span class="hljs-keyword">type</span> Test <span class="hljs-keyword">struct</span> &#123;<br>Name     <span class="hljs-keyword">string</span><br>Token    <span class="hljs-keyword">string</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Format</span><span class="hljs-params">(placedata <span class="hljs-keyword">interface</span>&#123;&#125;, data <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<br>s := <span class="hljs-built_in">new</span>(strings.Builder)<br>temp, _ := template.New(<span class="hljs-string">&quot;tplname&quot;</span>).Parse(data)<br>err := temp.Execute(s, placedata)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">return</span> s.String()<br>&#125;<br>haha := <span class="hljs-string">`</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;name&quot;: &quot;&#123;&#123;.Name&#125;&#125;&quot;,</span><br><span class="hljs-string">        &quot;test&quot;: &quot;&#123;&#123;.Token&#125;&#125;&quot;</span><br><span class="hljs-string">        &#125;`</span><br>data := ItemTestdata&#123;<span class="hljs-string">&quot;你好哦哦哦AA&quot;</span>, <span class="hljs-string">&quot;我佛了&quot;</span>&#125;<br>postdata := Format(data, haha)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//空接口不可以直接引用，要先判定类型</span><br><span class="hljs-comment">//通过.(stirng)或者.([]interface&#123;&#125;)等来判定字符串或者切片等</span><br><span class="hljs-keyword">var</span> result1 <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br>test_id, _ := result1[<span class="hljs-string">&quot;objectId&quot;</span>].(<span class="hljs-keyword">string</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//&quot;net/http&quot;的使用</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Get</span><span class="hljs-params">(yoururl <span class="hljs-keyword">string</span>, data <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>]<span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>request, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, yoururl, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//加入get参数</span><br>q := request.URL.Query()<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> data &#123;<br>q.Add(key, value)<br>&#125;<br>request.URL.RawQuery = q.Encode()<br>resp, err := http.DefaultClient.Do(request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>data1, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br>rdata := <span class="hljs-keyword">string</span>(data1)<br>result := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>err1 := json.Unmarshal([]<span class="hljs-keyword">byte</span>(rdata), &amp;result)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-comment">// log.Print(&quot;GET请求 &quot;, request.URL, &quot; &quot;, resp.Status)</span><br><span class="hljs-keyword">return</span> result<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Post</span><span class="hljs-params">(yoururl <span class="hljs-keyword">string</span>, data <span class="hljs-keyword">string</span>, yourheader <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;, *http.Response)</span></span> &#123;<br>data2 := strings.NewReader(data)<br>request, err := http.NewRequest(<span class="hljs-string">&quot;POST&quot;</span>, yoururl, data2)<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> yourheader &#123;<br>request.Header.Set(key, value)<br>&#125;<br><span class="hljs-comment">// request.Header.Set(&quot;Content-Type&quot;, &quot;text/plain&quot;)</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br>resp1, err := http.DefaultClient.Do(request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp1.Body.Close()<br>data1, err := ioutil.ReadAll(resp1.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br>rdata := <span class="hljs-keyword">string</span>(data1)<br><span class="hljs-comment">//转成map为了后续方便用</span><br>result := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>err1 := json.Unmarshal([]<span class="hljs-keyword">byte</span>(rdata), &amp;result)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> result, resp1<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler拦截操作</title>
    <link href="/2022/03/06/Fiddler%E6%8B%A6%E6%88%AA%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/03/06/Fiddler%E6%8B%A6%E6%88%AA%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="Fiddler拦截操作"><a href="#Fiddler拦截操作" class="headerlink" title="Fiddler拦截操作"></a>Fiddler拦截操作</h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul><li>bps 200 中断200状态的所有请求；bps（不加参数）取消所有bps中断</li><li>bpafter  aaa 中断包含aaa的URL（也可以直接写整个URL），通常用来做中断，修改返回值用</li><li>bpu同bpafter作用相似，同理，bpu不带参数，则是取消所有设置的中断</li><li>go 让当前中断的请求全部继续执行跳过中断</li><li>select可以选择URL，比如select image，选择image的URL</li></ul><h4 id="拦截请求修改返回的几种方法"><a href="#拦截请求修改返回的几种方法" class="headerlink" title="拦截请求修改返回的几种方法"></a>拦截请求修改返回的几种方法</h4><h5 id="方式一：先bpafter-url；重新加载请求后会在该url中断，修改Inspectors下TextView的值即可；不需要更改content-length；"><a href="#方式一：先bpafter-url；重新加载请求后会在该url中断，修改Inspectors下TextView的值即可；不需要更改content-length；" class="headerlink" title="方式一：先bpafter url；重新加载请求后会在该url中断，修改Inspectors下TextView的值即可；不需要更改content-length；"></a>方式一：先bpafter url；重新加载请求后会在该url中断，修改Inspectors下TextView的值即可；不需要更改content-length；</h5><h5 id="方式二（推荐）"><a href="#方式二（推荐）" class="headerlink" title="方式二（推荐）:"></a>方式二（推荐）:</h5><p>save ResponseBody，然后AutoRespender中启用即可，可以随意更改返回json中的内容；不建议用Entire ResponseBody，因为实际使用增加了接口返回长度，需要修改content-length，否则会导致返回内容被截断。</p><p><img src="/img/image-20220130171807524.png" alt="image-20220130171807524"></p><p><img src="/img/image-20220130172101062.png" alt="image-20220130172101062"></p><p>参考：<a href="https://blog.csdn.net/weixin_42380194/article/details/84314181">https://blog.csdn.net/weixin_42380194/article/details/84314181</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>fiddler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>转行后首次使用Jmeter----基本使用</title>
    <link href="/2022/03/06/Jmeter%20Functions%20and%20Variables/"/>
    <url>/2022/03/06/Jmeter%20Functions%20and%20Variables/</url>
    
    <content type="html"><![CDATA[<h4 id="Jmeter上下文引用"><a href="#Jmeter上下文引用" class="headerlink" title="Jmeter上下文引用"></a>Jmeter上下文引用</h4><p>变量引用：${para},  比如用于请求头，或者参数化请求body；</p><p>引用jmeter系统变量：**${__property(para)}**</p><p><a href="https://jmeter.apache.org/usermanual/functions.html#__property">https://jmeter.apache.org/usermanual/functions.html#__property</a></p><p>那么如何设置变量？</p><p>eg: </p><ul><li>jsonpath提取值</li><li>元器：用户参数、信息头管理器</li><li>functions语法设置：${__setProperty(sessionToken, ${sessiontoken},)}，将${sessiontoken}该引用变量设置为Jmeter系统变量sessionToken，之后就可以${sessiontoken}来引用</li></ul><h4 id="Jmeter-Functions-and-Variables"><a href="#Jmeter-Functions-and-Variables" class="headerlink" title="Jmeter: Functions and Variables"></a>Jmeter: Functions and Variables</h4><p>食用方法：**${__functionName(var1,var2,var3)}**</p><p>特别注意：在代码中食用方式如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">正确例子：var <span class="hljs-attr">person</span> = <span class="hljs-string">&quot;啊哈<span class="hljs-subst">$&#123;__threadNum&#125;</span>&quot;</span><br><br>错误例子：var <span class="hljs-attr">person</span> = <span class="hljs-string">&quot;啊哈&quot;</span> + $&#123;__threadNum&#125;.<span class="hljs-built_in">toString</span>()<br></code></pre></td></tr></table></figure><p>常用函数举例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;__time(dd/MM/yyyy,)&#125;</span><br><span class="hljs-comment">#如果在 2018 年 1 月 21 日运行， 将返回21/01/2018</span><br><br><span class="hljs-variable">$&#123;__CSVRead(random.txt,0)&#125;</span><br><span class="hljs-comment">#适用小文件</span><br></code></pre></td></tr></table></figure><p>更多食用方法参考函数助手：</p><p><img src="/img/image-20220214203401644.png" alt="image-20220214203401644"></p><p>值得注意的是，在脚本中直接引用jmeter函数，应当作为变量来使用，而不是已知变量：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"># 正确写法<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$&#123;__CSVRead</span>(<span class="hljs-keyword">D</span>:\<span class="hljs-keyword">test</span>.csv,0)&#125; = <span class="hljs-string">&quot;卡库拉&quot;</span>;<br>错误写法,报错XXX未定义<br><span class="hljs-keyword">var</span> aa = <span class="hljs-variable">$&#123;__CSVRead</span>(<span class="hljs-keyword">D</span>:\<span class="hljs-keyword">test</span>.csv,0)&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20220214205219976.png" alt="image-20220214205219976"></p><h5 id="官网参考网址"><a href="#官网参考网址" class="headerlink" title="官网参考网址:"></a>官网参考网址:</h5><p><a href="https://jmeter.apache.org/usermanual/functions.html#">https://jmeter.apache.org/usermanual/functions.html#</a></p><h4 id="JSR223-预处理程序"><a href="#JSR223-预处理程序" class="headerlink" title="JSR223 预处理程序"></a>JSR223 预处理程序</h4><p>先认识一下老的BeanShell处理程序</p><p><a href="https://jmeter.apache.org/usermanual/functions.html#__BeanShell">https://jmeter.apache.org/usermanual/functions.html#__BeanShell</a></p><p><a href="https://jmeter.apache.org/usermanual/component_reference.html#BeanShell_Sampler">https://jmeter.apache.org/usermanual/component_reference.html#BeanShell_Sampler</a></p><ul><li><strong>ctx</strong> - <a href="https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterContext.html">JMeterContext</a> object，以ctx为例，是Jmetercontext类，便可以找到该类下的方法，举例，可以通过ctx.getCurrentSampler()去引用</li><li><strong>vars</strong> - <a href="https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html">JMeterVariables</a> object，这个涉及到最基础的变量使用方式，比如<strong>var.put(key,value),var.get(key)</strong></li><li><strong>props</strong> - JMeterProperties (class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><strong>java.util.Properties</strong></a>) object</li><li><strong>threadName</strong> - the threadName (String)</li><li><strong>Sampler</strong> - the current <a href="https://jmeter.apache.org/api/org/apache/jmeter/samplers/Sampler.html">Sampler</a>, if any</li><li><strong>SampleResult</strong> - the current <a href="https://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a>,</li><li><strong>props</strong> - JMeterProperties (class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><strong>java.util.Properties</strong></a>) 该方法也很重要。</li><li>补充区别：vars 只能在当前线程内使用，props 可以跨线程组使用<br>vars 只能保存 String 或者 Object，props 是 Hashtable 对象</li></ul><p>接下来看下JSR223处理器</p><p><a href="https://jmeter.apache.org/usermanual/component_reference.html#JSR223_Sampler">https://jmeter.apache.org/usermanual/component_reference.html#JSR223_Sampler</a></p><p>值得注意的是这几句话：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">When using this feature, ensure your <span class="hljs-keyword">script </span>code does not use <span class="hljs-keyword">JMeter </span>variables <span class="hljs-keyword">or </span><span class="hljs-keyword">JMeter </span>function calls <span class="hljs-keyword">directly </span>in <span class="hljs-keyword">script </span>code as caching would only <span class="hljs-keyword">cache </span>first replacement. <span class="hljs-keyword">Instead </span>use <span class="hljs-keyword">script </span>parameters.<br><br>To <span class="hljs-keyword">benefit </span>from caching <span class="hljs-keyword">and </span>compilation, the language engine used for <span class="hljs-keyword">scripting </span>must implement <span class="hljs-keyword">JSR223 </span>Compilable interface (Groovy is one of these, <span class="hljs-keyword">java, </span><span class="hljs-keyword">beanshell </span><span class="hljs-keyword">and </span><span class="hljs-keyword">javascript </span>are not)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python中三重引号的使用</title>
    <link href="/2022/03/06/python%E4%B8%AD%E4%B8%89%E9%87%8D%E5%BC%95%E5%8F%B7%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8D%A0%E4%BD%8D%E7%AC%A6/"/>
    <url>/2022/03/06/python%E4%B8%AD%E4%B8%89%E9%87%8D%E5%BC%95%E5%8F%B7%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8D%A0%E4%BD%8D%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="python中三重引号中如何使用占位符"><a href="#python中三重引号中如何使用占位符" class="headerlink" title="python中三重引号中如何使用占位符"></a>python中三重引号中如何使用占位符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> Template<br>data = <span class="hljs-string">&#x27;&#x27;&#x27;&#123;</span><br><span class="hljs-string">          &quot;name&quot;: $para,</span><br><span class="hljs-string">          &quot;workspace&quot;: &#123;</span><br><span class="hljs-string">            &quot;__type&quot;: &quot;Pointer&quot;,</span><br><span class="hljs-string">            &quot;className&quot;: &quot;Workspace&quot;,</span><br><span class="hljs-string">            &quot;objectId&quot;: &quot;HQQAJJlYXV&quot;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>    s = Template(data)<br>    result = s.substitute(para=<span class="hljs-string">&#x27;tim&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(result)<br> <span class="hljs-comment"># 输入</span><br>&#123;<br>         <span class="hljs-string">&quot;name&quot;</span>: tim,<br>         <span class="hljs-string">&quot;workspace&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;__type&quot;</span>: <span class="hljs-string">&quot;Pointer&quot;</span>,<br>           <span class="hljs-string">&quot;className&quot;</span>: <span class="hljs-string">&quot;Workspace&quot;</span>,<br>           <span class="hljs-string">&quot;objectId&quot;</span>: <span class="hljs-string">&quot;HQQAJJlYXV&quot;</span><br>         &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>参考官网文档：<a href="https://docs.python.org/3/library/string.html#string-formatting">https://docs.python.org/3/library/string.html#string-formatting</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paramiko踩坑</title>
    <link href="/2021/11/25/paramiko%E8%B8%A9%E5%9D%91/"/>
    <url>/2021/11/25/paramiko%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h4 id="paramiko踩坑：远程上传下载以及linux命令执行"><a href="#paramiko踩坑：远程上传下载以及linux命令执行" class="headerlink" title="paramiko踩坑：远程上传下载以及linux命令执行"></a>paramiko踩坑：远程上传下载以及linux命令执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> parse_config<br><span class="hljs-keyword">import</span> pysvn<br>tran = paramiko.Transport(<span class="hljs-string">&#x27;XXX&#x27;</span>)<br>tran.connect(username=<span class="hljs-string">&#x27;XXX&#x27;</span>, password=<span class="hljs-string">&quot;XXX&quot;</span>)<br><span class="hljs-comment"># 获取SFTP实例</span><br>sftp = paramiko.SFTPClient.from_transport(tran)<br><br>local_excel = <span class="hljs-string">&quot;XXX&quot;</span><br>remotepath = <span class="hljs-string">&quot;XXX&quot;</span><br><br>svnclient = pysvn.Client(local_excel)<br>changes = svnclient.status(local_excel)<br><span class="hljs-comment">#这里是获取svn modified，我主要是获取改动的excel文件</span><br>change_exc = [f.path <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> changes <span class="hljs-keyword">if</span> f.text_status == pysvn.wc_status_kind.modified]<br><br><span class="hljs-comment">#我自己做的一些其他处理，可不管</span><br>parconf = parse_config.parsetable<br>need_parese = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_exc:<br>    xls_name = i.split(<span class="hljs-string">&quot;文档\\&quot;</span>)[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(xls_name)<br>    targetpath = remotepath + xls_name<br>    localpath = i.replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-comment"># print(&quot;本地位置----&quot;, localpath, &quot;目标位置----&quot;, targetpath)</span><br>    sftp.put(localpath, targetpath)<br>    parse_file = <span class="hljs-string">&quot;文档\\&quot;</span> + xls_name<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> parconf.items():<br>        <span class="hljs-keyword">for</span> ls <span class="hljs-keyword">in</span> v:<br>            <span class="hljs-keyword">if</span> ls[<span class="hljs-string">&quot;parse_file&quot;</span>] == parse_file:<br>                need_parese.append(k)<br>                <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(need_parese)<br>tran.close()<br><br><span class="hljs-comment"># 配置私人密钥文件位置</span><br><span class="hljs-comment"># private = paramiko.RSAKey.from_private_key_file(&#x27;D:/dev_rsa/id_rsa_2048&#x27;, password=&#x27;123456&#x27;)</span><br><span class="hljs-comment"># 实例化SSHClient</span><br>client = paramiko.SSHClient()<br><br><span class="hljs-comment"># 自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接</span><br>client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 连接SSH服务端，以用户名和密码进行认证</span><br>client.connect(hostname=<span class="hljs-string">&#x27;1XXX&#x27;</span>, username=<span class="hljs-string">&#x27;XXX&#x27;</span>, password=<span class="hljs-string">&quot;XXX&quot;</span>)<br><br><span class="hljs-comment"># parse_com = &quot;./tools/parse_local_table.py&quot;</span><br>parse_com = <span class="hljs-string">&quot;git branch&quot;</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> need_parese:<br>    parse_com = parse_com + <span class="hljs-string">&quot; &quot;</span> + k<br><br><span class="hljs-comment"># stdin1, stdout1, stderr1 = client.exec_command(&#x27;cd qqsj_qc01/logic/;./tools/parse_local_table.py activity_theme&#x27;)</span><br>cmd = <span class="hljs-string">&quot;bash --login -c &#x27;cd qqsj_qc01/logic/;&#123;&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(parse_com)<br><span class="hljs-built_in">print</span>(cmd)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------开始执行导表----------------&quot;</span>)<br>stdin1, stdout1, stderr1 = client.exec_command(cmd, get_pty=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(stdout1.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>client.close()<br><br><br><span class="hljs-comment"># 执行上传下载动作</span><br><span class="hljs-comment"># sftp.put(i, remotepath)</span><br><span class="hljs-comment"># sftp.get(remote_parseconfig, local_parseconfig)</span><br><br></code></pre></td></tr></table></figure><ul><li> 踩坑点1：远程Linux命令执行，会出现command Not found，因为执行的path不对。必须采用bash –login登陆方式（这个方式表示用户登陆时，输入用户名和密码后启动的shell）。</li><li> 踩坑点2：执行命令要一并执行，中间用,分割，否则不是同一个会话。如果分开执行client.exec_command(cd home/my)和client.exec_command(ls)，最后列出目录并不是my下面文件</li></ul><p>Bash 的激活选项<br>-c string 该选项表明string中包含了一条命令.如 bash -c ls ~；bash –login -c ‘cd /home/my,ls’<br>-i 使Bash以交互式方式运行<br>-r 使Bash以受限方式运行<br>–login 使Bash以登录Shell方式运行<br>–posix 使Bash遵循POSIX标准<br>–verbose 使Bash显示所有其读入的输入行<br>–help 打印Bash的使用信息<br>–version 打印版本信息<br>–noprofile<br>–norc<br>–rcfile file</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>paramiko</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go println朔源</title>
    <link href="/2021/11/16/Println%E6%9C%94%E6%BA%90/"/>
    <url>/2021/11/16/Println%E6%9C%94%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i integer)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  fmt.Println(integer(<span class="hljs-number">5</span>))<br>&#125;<br><span class="hljs-comment">//输出 hello；事实上，interger(1)，中间数字无论如何变化，输出都是hello</span><br></code></pre></td></tr></table></figure><p><code>Println</code>—-&gt;<code>Fprintln</code>—-&gt;<code>p.doPrintln(a)</code>—-&gt;<code>p.printArg(arg, &#39;v&#39;)</code><br>打断点<code>switch f := arg.(type)</code>发现类型并不走<code>switch</code>，而是调用<code>p.handleMethods(verb)</code>，最后调用的是<code>p.fmtString(v.String(), verb)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> v := p.arg.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> error:<br>    handled = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">defer</span> p.catchPanic(p.arg, verb, <span class="hljs-string">&quot;Error&quot;</span>)<br>    p.fmtString(v.Error(), verb)<br>    <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">case</span> Stringer:<br>    handled = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">defer</span> p.catchPanic(p.arg, verb, <span class="hljs-string">&quot;String&quot;</span>)<br>    p.fmtString(v.String(), verb)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">//另外找到Stringer和error类型定义</span><br><span class="hljs-keyword">type</span> Stringer <span class="hljs-keyword">interface</span> &#123;<br>String() <span class="hljs-keyword">string</span><br>&#125;<br><span class="hljs-keyword">type</span> error <span class="hljs-keyword">interface</span> &#123;<br>Error() <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果自己实现了String方法，那么则会调用你实现的方法，最后输出是hello</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> haha <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *haha)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello1&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *haha)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello2&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(&amp;haha&#123;&#125;)<br>&#125;<br><span class="hljs-comment">//内置的Println是不能输出结构体的，那么走error就会输出我们自己实现的Error方法</span><br>[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;d:\go work\test.go&quot;</span><br>hello2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go defer特点</title>
    <link href="/2021/11/16/%E5%A4%9A%E4%B8%AAdefer%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/11/16/%E5%A4%9A%E4%B8%AAdefer%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ul><li>后进先出原则</li><li>报错也不会阻断defer输出<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test_error</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span> &#123;<br>result := <span class="hljs-number">100</span> / x<br>fmt.Println(<span class="hljs-string">&quot;result = &quot;</span>, result)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;aaaaaaaaaaaaaaaa&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;bbbbbbbbbbbbbbbb&quot;</span>)<br><span class="hljs-comment">//调用一个报错函数</span><br><span class="hljs-keyword">defer</span> test_error(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;cccccccccccccccc&quot;</span>)<br>   <br></code></pre></td></tr></table></figure></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;d:\go work\test.go&quot;</span><br>cccccccccccccccc<br>bbbbbbbbbbbbbbbb<br>aaaaaaaaaaaaaaaa<br><span class="hljs-built_in">panic</span>: runtime error: integer divide by zero<br><br>goroutine <span class="hljs-number">1</span> [running]:<br>main.test_error(<span class="hljs-number">0x7961f0</span>)<br>d:/<span class="hljs-keyword">go</span> work/test.<span class="hljs-keyword">go</span>:<span class="hljs-number">9</span> +<span class="hljs-number">0xad</span><br>main.main()<br>d:/<span class="hljs-keyword">go</span> work/test.<span class="hljs-keyword">go</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0x132</span><br>exit status <span class="hljs-number">2</span><br><br>[Done] exited with code=<span class="hljs-number">1</span> in <span class="hljs-number">1.094</span> seconds<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tops和dumpsys</title>
    <link href="/2021/08/25/tops%E5%92%8Cdumpsys/"/>
    <url>/2021/08/25/tops%E5%92%8Cdumpsys/</url>
    
    <content type="html"><![CDATA[<h3 id="top命令详解"><a href="#top命令详解" class="headerlink" title="top命令详解"></a>top命令详解</h3><p>基本使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:\Program Files (x86)\Android\android-sdk\platform-tools&gt;adb -s 7PR4C19912015805 shell top --help<br>usage: top [-Hbq] [-k FIELD,] [-o FIELD,] [-s SORT] [-n NUMBER] [-m LINES] [-d SECONDS] [-p PID,] [-u USER,]<br><br>Show process activity in real time.<br><br>-H      Show threads<br>-k      Fallback sort FIELDS (default -S,-%CPU,-ETIME,-PID)<br>-o      Show FIELDS (def PID,USER,PR,NI,VIRT,RES,SHR,S,%CPU,%MEM,TIME+,CMDLINE)<br>-O      Add FIELDS (replacing PR,NI,VIRT,RES,SHR,S from default)<br>-s      Sort by field number (1-X, default 9)<br>-b      Batch mode (no tty)<br>-d      Delay SECONDS between each cycle (default 3)<br>-m      Maximum number of tasks to show<br>-n      Exit after NUMBER iterations<br>-p      Show these PIDs<br>-u      Show these USERs<br>-q      Quiet (no header lines)<br><br>Cursor LEFT/RIGHT to change sort, UP/DOWN move list, space to force<br>update, R to reverse sort, Q to exit.<br></code></pre></td></tr></table></figure><p>结合findstr(windows用findstr，linux用grep)使用，其中<code>-s 7PR4C19912015805</code>指定设备名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb -s 7PR4C19912015805 shell top  -d 1<br>//结合findstr或者grep使用，注意有些包名太长系统不会显示全名，此时搜索全名包名可能搜不到，建议搜索部分包名<br>adb -s 7PR4C19912015805 shell top  -d 1 | findstr com.XXX.XXX<br>//把top输出保存到adb工具的当前目录下1257.txt文件<br>adb -s 7PR4C19912015805 shell &quot;top  -d 1|grep com.XXX.XXX&quot; &gt;1257.txt<br></code></pre></td></tr></table></figure><h3 id="top重要参数含义"><a href="#top重要参数含义" class="headerlink" title="top重要参数含义"></a>top重要参数含义</h3><p>**VIRT：virtual memory usage 虚拟内存<br>**1、进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等。VIRT=SWAP（交换内存）+RES</p><p>2、假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量</p><p><strong>RES：resident memory usage 常驻内存</strong><br>1、进程当前使用的内存大小，但不包括swap out<br>2、包含其他进程的共享<br>3、如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反<br>4、关于库占用内存的情况，它只统计加载的库文件所占内存大小</p><p><strong>SHR：shared memory 共享内存</strong><br>1、除了自身进程的共享内存，也包括其他进程的共享内存<br>2、虽然进程只使用了几个共享库的函数，但它包含了整个共享库的大小<br>3、计算某个进程所占的物理内存大小公式：RES – SHR<br>4、swap out后，它将会降下来</p><p>参考连接：</p><p><a href="https://javawind.net/p131">https://javawind.net/p131</a></p><p><a href="https://www.cnblogs.com/flyingcode/p/13690223.html">https://www.cnblogs.com/flyingcode/p/13690223.html</a></p><h3 id="dumpsys-meminfo详解"><a href="#dumpsys-meminfo详解" class="headerlink" title="dumpsys meminfo详解"></a>dumpsys meminfo详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell dumpsys meminfo [pkg/pid]<br>D:\Program Files (x86)\Android\android-sdk\platform-tools&gt;adb -s 7PR4C19912015805 shell dumpsys meminfo -h<br>meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]<br>  -a: include all available information for each process.<br>  -d: include dalvik details.<br>  -c: dump in a compact machine-parseable representation.<br>  -s: dump only summary of application memory usage.<br>  -S: dump also SwapPss.<br>  --oom: only show processes organized by oom adj.<br>  --local: only collect details locally, don&#x27;t call process.<br>  --package: interpret process arg as package, dumping all<br>             processes that have loaded that package.<br>  --checkin: dump data for a checkin<br>  --proto: dump data to proto<br>If [process] is specified it can be the name or<br>pid of a specific process to dump.<br></code></pre></td></tr></table></figure><p>其他常用服务信息查询</p><ul><li><p>内存 adb shell dumpsys meminfo</p></li><li><p>CPU adb shell dumpsys cpuinfo</p></li><li><p>帧率 adb shell dumpsys gfxinfo</p></li><li><p>显示 adb shell dumpsys display</p></li><li><p>电源 adb shell dumpsys power</p></li><li><p>电池状态 adb shell dumpsys batterystats</p></li><li><p>电池 adb shell dumpsys battery</p></li><li><p>闹钟 adb shell dumpsys alarm</p></li><li><p>位置 adb shell dumpsys location</p></li></ul><p>Uptime</p><p>表示启动到现在的时长，不包含休眠的时间，单位毫秒(ms)</p><p>Realtime</p><p>表示启动到现在的时长，包含休眠的时间，单位毫秒(ms)</p><p>Native Heap</p><p>指c 中malloc出来的堆空间</p><p>扩展：c++申请的内存为native process，java申请的内存：java process</p><p>Dalvik Heap</p><p>指java中new出来的java堆空间</p><p>只是占用的虚拟内存的空间</p><p>Pss Total</p><p>指占用了真实的物理内存的空间</p><p>private dirty</p><p>指私有驻留内存</p><p>扩展：进程内存空间是虚拟内存，区分于物理内存，进程无法直接操作物理内存RAM。必要时，操作系统对其进行映射，使进程能应用到物理内存</p><p>Heap Size</p><p>指占用总内存（Heap 堆）</p><p>Heap Alloc</p><p>指在虚拟地址中分配了这么多空间</p><p>Heap Free</p><p>空闲内存</p><p>参考连接：</p><p><a href="https://www.cnblogs.com/hzcya1995/p/13309149.html">https://www.cnblogs.com/hzcya1995/p/13309149.html</a></p><h3 id="查看包名方式"><a href="#查看包名方式" class="headerlink" title="查看包名方式"></a>查看包名方式</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//方式一，可以用FILTER去搜索</span><br>adb shell pm list packages <span class="hljs-selector-attr">[-f]</span> <span class="hljs-selector-attr">[-d]</span> <span class="hljs-selector-attr">[-e]</span> <span class="hljs-selector-attr">[-s]</span> <span class="hljs-selector-attr">[-3]</span> <span class="hljs-selector-attr">[-i]</span> <span class="hljs-selector-attr">[-u]</span> <span class="hljs-selector-attr">[--user USER_ID]</span> <span class="hljs-selector-attr">[FILTER]</span><br>参数显示列表<br>无所有应用<br>-f显示应用关联的 apk 文件<br>-d只显示 disabled 的应用<br>-e只显示 enabled 的应用<br>-s只显示系统应用<br>-3只显示第三方应用<br>-<span class="hljs-selector-tag">i</span>显示应用的 installer<br>-u包含已卸载应用<br>&lt;<span class="hljs-attribute">FILTER</span>&gt;包名包含 &lt;<span class="hljs-attribute">FILTER</span>&gt; 字符串<br>adb -s 7PR4C19912015805 shell pm list packages weixin<br><span class="hljs-comment">//方式二，直接查看活动的应用占用资源情况</span><br>adb -s 7PR4C19912015805 shell <span class="hljs-attribute">top</span>  -d 1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>adb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>想做最好的策划配表检查工具</title>
    <link href="/2021/08/03/%E6%83%B3%E5%81%9A%E6%9C%80%E5%A5%BD%E7%9A%84%E7%AD%96%E5%88%92%E9%85%8D%E8%A1%A8%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/08/03/%E6%83%B3%E5%81%9A%E6%9C%80%E5%A5%BD%E7%9A%84%E7%AD%96%E5%88%92%E9%85%8D%E8%A1%A8%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>很多项目组也都有自己的检配表查方法，我也见过两个项目组的两种不同做法，但是我是不太认同的。我综合考虑出另外一种做法（个人觉得是不错的，而且目前实行起来深得我意），但是由于某些原因，我没有在原来项目中去推动我的想法实现。</p><p>这个想法两年前就有了，可惜一直没机会实践。2020年4月的时候终于迎来一次机会，于是把想法付诸实际。如今回望，也是颇有感慨。写一写我怎么做的吧。</p><h4 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h4><p>我需要去考虑的一些点：</p><ul><li>配表改动可能会很频繁，包括但不限于增删表头、改数据格式等</li><li>配表可能会有多文件夹同名表格（SLG多赛季，不同赛季会有season1、season2文件夹，而且season下也可能有同名表）</li><li>当配置表多、规则多的情况下，需不需要去考虑效率问题。小几分钟出检查结果，我可以接受，10以上是不能接受的。</li><li>简单、方便快捷支持规则配置，规则增删</li><li>简单明了输出错误问题</li><li>要不要考虑平台化</li><li>……</li></ul><h4 id="尝试实现："><a href="#尝试实现：" class="headerlink" title="尝试实现："></a>尝试实现：</h4><p>不知道咋想的，当时就有一个想法，通过规则表映射去检查配表（刚好满足很多我的需求）。具体做法是：</p><ul><li>新建规则检查文件夹</li><li>将需要检查的表格复制过来，删除表格内容，在对应列配置规则</li></ul><p>这个做法在落实之后也有一些小问题持续优化，这点后面说。先说下核心做法的实现：</p><h5 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    table = Table()<br>    //这里用xlsx作为规则配置表，是因为后面优化有自动写入功能，相比xls，xlsx会更方便一些<br>    excel = file.File.get_file_dir(config.RULE_DIR, file_type=<span class="hljs-string">&quot;.xlsx&quot;</span>)<br>    d_excel = file.File.get_file_dir(config.DOC_DIR, file_type=<span class="hljs-string">&quot;.xls&quot;</span>)<br>    dd_excel = [i+<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d_excel]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;策划配置表有但是规则表没有的表格（注意补充）：&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(dd_excel).difference(<span class="hljs-built_in">set</span>(excel))))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;规则表有但是策划配置表没有的表格（可以删除）：&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(excel).difference(<span class="hljs-built_in">set</span>(dd_excel))))<br>    <span class="hljs-keyword">for</span> every_excel <span class="hljs-keyword">in</span> excel:<br>        <span class="hljs-comment"># if every_excel != &quot;\K卡牌突破表.xlsx&quot;:</span><br>        <span class="hljs-comment">#     continue</span><br>        check_excel(every_excel)<br></code></pre></td></tr></table></figure><h5 id="check-excel方法核心代码"><a href="#check-excel方法核心代码" class="headerlink" title="check_excel方法核心代码"></a>check_excel方法核心代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> head_name <span class="hljs-keyword">in</span> head_list:<br>    <span class="hljs-keyword">if</span> head_name == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> head_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d_head_list:<br>        <span class="hljs-built_in">print</span>(head_name, excel_name, <span class="hljs-string">&quot;规则表的表头不存在配置表的表头&quot;</span>)<br>        <span class="hljs-keyword">continue</span><br>    d_col = d_head_list.index(head_name)<br>    col = head_list.index(head_name)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(config.ROW_START, sheet.nrows):<br>        <span class="hljs-keyword">if</span> sheet.cell_value(i, col) <span class="hljs-keyword">is</span> <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-keyword">continue</span><br>        cell = <span class="hljs-built_in">str</span>(sheet.cell_value(i, col)).replace(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># value_dict = json.loads(cell)</span><br>            value_dict = json.loads(cell, strict=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;@@@@@@@@@@@@@@@@@@@规则配置错误&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cell), excel_name)<br>        (key, value), = value_dict.items()<br>        <span class="hljs-comment"># 传参：所检查的表的相关信息</span><br>        <span class="hljs-built_in">getattr</span>(rule, config.switch[key])(value, excel_name=excel_name[:-<span class="hljs-number">1</span>], sheet_name=sheet_name, col_index=d_col)<br></code></pre></td></tr></table></figure><h5 id="Rule规则定义与代码实现"><a href="#Rule规则定义与代码实现" class="headerlink" title="Rule规则定义与代码实现"></a>Rule规则定义与代码实现</h5><p>我希望把rule分别归类，这样会非常容易去找到我对应的规则。我在config中会配置有多少类规则，比如In类规则，泛指A列存在B列、当A=X，B列存在C列…此类规则；Match规则，包含A列满足正则表达、当A列=X，B列满足正则表达这两种规则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">switch = &#123;<br>    <span class="hljs-string">&quot;_Only&quot;</span>: <span class="hljs-string">&quot;Only&quot;</span>,<br>    <span class="hljs-string">&quot;_In&quot;</span>: <span class="hljs-string">&quot;Ainb&quot;</span>,<br>    <span class="hljs-string">&quot;_Equal&quot;</span>: <span class="hljs-string">&quot;Equal&quot;</span>,<br>    <span class="hljs-string">&quot;_Match&quot;</span>: <span class="hljs-string">&quot;Match&quot;</span>,<br>    <span class="hljs-string">&quot;_Dict&quot;</span>: <span class="hljs-string">&quot;Dictionary&quot;</span>,<br>    <span class="hljs-string">&quot;_Condition&quot;</span>: <span class="hljs-string">&quot;Condition&quot;</span>,<br>    <span class="hljs-string">&quot;_Increasing&quot;</span>: <span class="hljs-string">&quot;Increasing&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我以In类为例，说下我的做法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ainb</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-comment"># **kwargs 记录正在检查的表格的相关信息</span><br>        <span class="hljs-comment"># r_wbk  指数据配置表中对应规则表的那个表（也就是数据表）</span><br>        <span class="hljs-comment"># d_wbk  指数据配置表中对应规则表配置的规则所指向的那个表（也就是我配的规则里指向的那个表）</span><br>        self.excel_name = kwargs[<span class="hljs-string">&quot;excel_name&quot;</span>]<br>        self.sheet_name = kwargs[<span class="hljs-string">&quot;sheet_name&quot;</span>]<br>        self.col_index = kwargs[<span class="hljs-string">&quot;col_index&quot;</span>]<br>        self.args = args<br>        self.r_wbk = table.open_workbook(config.DOC_DIR, self.excel_name)<br>        self.r_sheet = self.r_wbk.sheet_by_name(self.sheet_name)<br>        r_head = self.r_sheet.row_values(config.HEAD_CN)<br>        self.col_index_name = r_head[self.col_index]<br>        temp = &#123;<span class="hljs-string">&quot;All&quot;</span>: <span class="hljs-string">&quot;all_in&quot;</span>,<br>                <span class="hljs-string">&quot;Assign&quot;</span>: <span class="hljs-string">&quot;assign_in&quot;</span>,<br>                <span class="hljs-string">&quot;Part&quot;</span>: <span class="hljs-string">&quot;part_in&quot;</span>,<br>                <span class="hljs-string">&quot;Sequence&quot;</span>: <span class="hljs-string">&quot;sequence&quot;</span>,<br>                <span class="hljs-string">&quot;Whenassign&quot;</span>: <span class="hljs-string">&quot;whenassign&quot;</span>,<br>                <span class="hljs-string">&quot;Whenpoint&quot;</span>: <span class="hljs-string">&quot;whenpoint&quot;</span>,<br>                <span class="hljs-string">&quot;Every&quot;</span>: <span class="hljs-string">&quot;every_in&quot;</span>,<br>                <span class="hljs-string">&quot;Neighbor&quot;</span>: <span class="hljs-string">&quot;neighbor&quot;</span>,<br>                <span class="hljs-string">&quot;Allpoint&quot;</span>: <span class="hljs-string">&quot;allpoint&quot;</span>&#125;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(self.args[<span class="hljs-number">0</span>], <span class="hljs-built_in">dict</span>):<br>            (key, value), = self.args[<span class="hljs-number">0</span>].items()<br>            self.__getattribute__(temp[key])(value)<br><br>    <span class="hljs-comment"># 每个单元格都in指定的表格指定列的合集</span><br>    <span class="hljs-comment"># &#123;&quot;_In&quot;:&#123;&quot;All&quot;:[&quot;/冬天的秘密.xls&quot;,&quot;冬天的秘密--sheet&quot;,&quot;冬天的秘密--colname&quot;]&#125;&#125;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">all_in</span>(<span class="hljs-params">self, _value</span>):</span><br>        d_wbk = table.open_workbook(config.DOC_DIR, _value[<span class="hljs-number">0</span>])<br>        d_sheet = d_wbk.sheet_by_name(_value[<span class="hljs-number">1</span>])<br>        d_head = d_sheet.row_values(config.HEAD)<br>        d_index = d_head.index(_value[<span class="hljs-number">2</span>])<br>        d_col_list = table.get_content_by_col(<br>            config.DOC_DIR, _value[<span class="hljs-number">0</span>], _value[<span class="hljs-number">1</span>], d_index)<br>        d_col_list1 = [<span class="hljs-built_in">str</span>(j) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> d_col_list]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(config.ROW_START, self.r_sheet.nrows):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> agent.pass_empty(i, self.r_sheet, self.col_index):<br>                <span class="hljs-keyword">continue</span><br>            temp = Common.change_format(<br>                self.r_sheet.cell_value(<br>                    i, self.col_index))<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(temp) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d_col_list1:<br>                agent.pri_excel(<br>                    self.excel_name,<br>                    self.sheet_name,<br>                    i,<br>                    self.col_index_name)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;规则：每个单元格都in指定的表格指定列的合集。数据:::&#123;&#125;--&#123;&#125;&quot;</span>. <span class="hljs-built_in">format</span>(<br>                    <span class="hljs-built_in">str</span>(self.r_sheet.cell_value(i, self.col_index)), _value))<br></code></pre></td></tr></table></figure><p>如上代码，In为大类，大类包含小类。In类型规则，包含All类规则（每个单元格都in指定的表格指定列的合集）、Assign类规则（每个单元格都存在于由你设定的合集）等等（其他规则就不详细说了）。<code>self.__getattribute__(temp[key])(value)</code>会根据映射关系去执行对应方法来做检查。<code>all_in</code>方法会打印错误的规则以及错误数据；<code>pri_excel</code>方法负责通用打印，主要打印错误位置。下面给出打印结果示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pri_excel</span>(<span class="hljs-params">name, sheet, row=<span class="hljs-string">&#x27;&#x27;</span>, col=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-keyword">if</span> row == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> col == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">&quot;表格位置----------------------------------&#123;&#125;-------------------------&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(name, sheet,))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">&quot;表格位置----------------------------------&#123;&#125;--------------------------&#123;&#125;--行&#123;&#125;--列&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>                    name,<br>                    sheet,<br>                    row,<br>                    col))<br>//规则：每个单元格都<span class="hljs-keyword">in</span>指定的表格指定列的合集。数据:::<span class="hljs-number">208</span>--[<span class="hljs-string">&#x27;/冬天的秘密--表.xls&#x27;</span>, <span class="hljs-string">&#x27;冬天的秘密--Sheet1&#x27;</span>, <span class="hljs-string">&#x27;冬天的秘密--列&#x27;</span>]<br>//表格位置----------------------------------\XXX表.xls--------------------------Sheet1--行<span class="hljs-number">712</span>--列XXX（冬天的秘密--列名，注意不是列的index哦，列名，直接让你快速找到位置）<br></code></pre></td></tr></table></figure><h5 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h5><ul><li>遍历规则表</li><li>根据配置在规则表对应列下的规则，找到对应需要检查的配置表，以及规则中指向需要配合检查的另一个配置表（如果有的话）</li><li>按照规则执行检查，打印错误输出</li></ul><h4 id="实际应用与优化："><a href="#实际应用与优化：" class="headerlink" title="实际应用与优化："></a>实际应用与优化：</h4><h5 id="好的方面："><a href="#好的方面：" class="headerlink" title="好的方面："></a>好的方面：</h5><ul><li>目前我有的规则类，在上文中的<code>switch</code>可以看出来，有7大类，每个类下可能有不定数量的规则，总体来说99%满足了我的日常需要了。</li><li>代码结构支持随时自定义规则，你想增加删除规则，也是分分钟的事。你的想法有多优秀，规则就可以有多优秀。</li><li>配规则很简单。有多简单？找到对应规则表位置，打开，写入规则，完事了。规则很复杂吗？看你自己定义了。我日常做法：复制规则，改规则中的excel name，sheet name,col name三个参数，完事。</li><li>输出结果一目了然。错在哪，哪一行，列名是什么，因为什么规则错了，统统都有，会有人看不明白？看不明白的话，那我是真的佛了。</li></ul><h5 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h5><p>问题一：表头经常改动，列名也经常变化，规则表的表头就得手动更改保证和配置表一样（我强迫症，我就想一样，这样子很容易找位置）。比如原来配置表ABCD列，规则表也是ABCD列，后来迭代多次表变成了ABCFG列，我就又要手动删除D，又要手动补充FG。麻烦。于是自动同步表头配置脚本，又应运而生了。</p><p>这个脚本主要做什么事？帮我把D删除，帮我新建FG，如果AB之间多了个小三，那么也会自动把B列（以及B列下的所有规则）往后挪，小三则按照顺序放在A之后。总之，就是同步表头，同时把对应表头下的规则跟着表头一起挪动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 只支持xlsx</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_excel</span>(<span class="hljs-params">excel, df</span>):</span><br>    <span class="hljs-comment"># 先清除格式，再写入，才能成功</span><br>    pd.io.formats.excel.header_style = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">with</span> pd.ExcelWriter(excel) <span class="hljs-keyword">as</span> writer:<br>        df.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;Sheet1&#x27;</span>, startrow=<span class="hljs-number">0</span>, index=<span class="hljs-literal">False</span>, header=<span class="hljs-literal">False</span>)<br>        workbook = writer.book<br>        worksheets = writer.sheets<br>        worksheet = worksheets[<span class="hljs-string">&#x27;Sheet1&#x27;</span>]<br>        worksheet.set_column(<span class="hljs-string">&#x27;A:AD&#x27;</span>, <span class="hljs-number">20</span>)<br>        format1 = workbook.add_format(&#123;<br>            <span class="hljs-comment"># &#x27;bold&#x27;: True,  # 字体加粗</span><br>            <span class="hljs-comment"># &#x27;border&#x27;: 20,  # 单元格边框宽度</span><br>            <span class="hljs-comment"># &#x27;align&#x27;: &#x27;left&#x27;,  # 水平对齐方式</span><br>            <span class="hljs-comment"># &#x27;valign&#x27;: &#x27;vcenter&#x27;,  # 垂直对齐方式</span><br>            <span class="hljs-string">&#x27;fg_color&#x27;</span>: <span class="hljs-string">&#x27;#FFC000&#x27;</span>,  <span class="hljs-comment"># 单元格背景颜色</span><br>            <span class="hljs-comment"># &#x27;text_wrap&#x27;: True,  # 是否自动换行</span><br>        &#125;)<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>):<br>            worksheet.set_row(k, <span class="hljs-number">20</span>, format1)<br>        format2 = workbook.add_format(&#123;<span class="hljs-string">&#x27;fg_color&#x27;</span>: <span class="hljs-string">&#x27;#5B9BD5&#x27;</span>&#125;)<br>        worksheet.set_row(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, format2)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">15</span>):<br>            worksheet.set_row(j, <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>弄完之后，所有表长得一模一样，还有背景颜色，一家人就要整整齐齐，真开心。</p><p><img src="/img/image-20210803223027137.png" alt="image-20210803223027137"></p><p>问题二：平台化？</p><p>不打算，不建议搞，于是我砍掉了这个优化。我出于以下考虑：</p><ul><li><p>游戏行业人员会更喜欢和excel打交道</p></li><li><p>表头过多，web很难操作，样式也没excel好看。excel和策划配置表长的一样，容易形成习惯，有助于规则配置。</p></li><li><p>平台化的化，需要数据库。那就又要重新优化问题一了（又要写自动同步数据库表头的脚本）</p></li><li><p>我懒，不想搞平台。就是懒，咋的啦。</p></li></ul><p>问题三：工具运行中，某些规则兼容性不好，报错，就阻断了后面的检查。</p><p>举个例子，你配置一个<code>Dict</code>类规则，默认这个表格内容是可以转换为<code>json</code>或者<code>python dict</code>去做检查，但是配表数据出现了问题，导致报错，阻断后面流程（然后有人就会来找我说报错啦）。我目前的做法是，持续优化规则代码，增加兼容性，提前检查必要的数据格式，或者对易报错代码使用<code>try</code>。现在持续优化后，已经很少出现报错阻断了。一个字，美滋滋（三个字）。</p><p>问题四：效率问题？</p><p>目前100+表格，各种规则配置起来也蛮多的，但是运行时间不需要超过1分钟。所以暂时不用管了。</p><p>其实我也蛮期待，在更多表格数据、规则数据的情况下，工具的运行效率。我也提前预想过一些优化方案来提高效率。</p><p>问题五：规则维护问题—-会不会出现同个规则存在很多表，然后你需要一个一个去更改这些规则的写法？</p><p>我认为是不会出现的。在定义规则之前，就已经考虑通用性了，后续基本不会变动原有规则的写法，最多只会新增新的规则写法。所以旧的规则写法永远不需要去改动，也不建议去改动。如果实在要改动，建议改动代码去兼容原有规则写法。反正至今我都没改动过。</p><p>其他: 有点想把取出来的规则归类整理，再<code>getattr</code>一个类，跑完一个类的检查，再做下一个类，而不是现在混着检查（简单说就是检查顺序跟着大类走）。不过检查顺序又想着跟着表走也好，输出结果也能按照表顺序，也蛮好的。也有点想加入协程，但是涉及<code>open</code>同个表的问题，需要上锁，麻烦，算了，先这样，反正几十秒出结果了，效率能接受。</p><h4 id="附言："><a href="#附言：" class="headerlink" title="附言："></a>附言：</h4><p>仁者见仁智者见智，希望这个工具，成为比较好的配置表检查方案，也期待有人告诉我更好的方案。</p><p>首发于TesterHome:  <a href="https://testerhome.com/topics/30737">https://testerhome.com/topics/30737</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO内部包</title>
    <link href="/2021/08/03/GO%E5%86%85%E9%83%A8%E5%8C%85/"/>
    <url>/2021/08/03/GO%E5%86%85%E9%83%A8%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h4 id="结论先行"><a href="#结论先行" class="headerlink" title="结论先行"></a>结论先行</h4><ul><li><p>go通过func名字首字母大小写来控制类属性是否可以被外部包访问（包括但不局限于func、struct）</p></li><li><p>go通过internal文件夹（包括子目录）来决定是否为内部包</p></li></ul><p>首先看下我的测试文件夹结构（记得先执行<code>go mod init test</code>）：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima">└─test<br>    │  <span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br>    │  test.<span class="hljs-built_in">go</span><br>    │  <br>    └─test1<br>        │  hello.<span class="hljs-built_in">go</span><br>        │  test1.<span class="hljs-built_in">go</span><br>        │  <br>        └─test2<br>                test2.<span class="hljs-built_in">go</span><br></code></pre></td></tr></table></figure><p><code>test.go</code>内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;test/test1&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;你调用了package main&quot;</span>)<br>test1.Test1()<br>&#125;<br></code></pre></td></tr></table></figure><p>hello.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> test1<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>test1.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> test1<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test1</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;你调用了package test1 Test1&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>test2.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> test2<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;test/test1&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test2</span><span class="hljs-params">()</span></span> &#123;<br>test1.Hello()<br>fmt.Println(<span class="hljs-string">&quot;你调用了package test2 Test2&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="大小写测试"><a href="#大小写测试" class="headerlink" title="大小写测试"></a>大小写测试</h4><p>Test1()和Hello()都是可以被package main和package test2访问的。</p><p>测试把Test1()和Hello()改成test1()和hello()之后，代码无法运行。</p><h4 id="internal测试"><a href="#internal测试" class="headerlink" title="internal测试"></a>internal测试</h4><p>如果把Hello()改成hello()，那么test2和main包都无法访问test1包下的Hello()方法。可是我想要test2能够访问Hello()但是main不能访问，应该怎么做？</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima">└─test<br>    │  <span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br>    │  test.<span class="hljs-built_in">go</span><br>    │  <br>    └─test1<br>        │  test1.<span class="hljs-built_in">go</span><br>        │  <br>        ├─internal<br>        │      hello.<span class="hljs-built_in">go</span><br>        │      <br>        └─test2<br>                test2.<span class="hljs-built_in">go</span><br>                test3.<span class="hljs-built_in">go</span><br></code></pre></td></tr></table></figure><p>test1文件夹下新建文件夹internal，把hello.go丢进去，同时更改文件内容的package</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> internal<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>test2访问Hello()<code>import &quot;test/test1/internal&quot;</code>没问题；</p><p>man如果也访问<code>import &quot;test/test1/internal&quot;</code>，会提示<code>use of internal package test/test1/internal not allowed (compile)go-staticcheck</code></p><p>官网说明参考：<a href="https://golang.org/doc/go1.4#internalpackages">https://golang.org/doc/go1.4#internalpackages</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO环境配置（VSCODE篇）</title>
    <link href="/2021/08/02/GO%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88VSCODE%E7%AF%87%EF%BC%89/"/>
    <url>/2021/08/02/GO%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88VSCODE%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>公司电脑虽然早已配好go环境，但是家里笔记本还没呢。搞一下，顺带记录实操过程。</p><h4 id="go下载安装："><a href="#go下载安装：" class="headerlink" title="go下载安装："></a>go下载安装：</h4><p>官网：<a href="https://golang.google.cn/">https://golang.google.cn/</a></p><p>建议下载windows安装包，安装过程改路径：D:\Program Files\Go\</p><p>确认系统变量path变量多了：D:\Program Files\Go\bin</p><p>在cmd窗口中执行go，确认go命令生效。</p><h4 id="VS-code配置："><a href="#VS-code配置：" class="headerlink" title="VS code配置："></a>VS code配置：</h4><p>我在D盘新建了文件夹gowork（最好不要出现空格，养成习惯）</p><ul><li><p>vs code安装code run插件</p></li><li><p>用vs code打开gowork文件夹</p></li><li><p>在文件夹新建main.go，此时vs code提示是否安装go扩展以及gopls，最后安装失败（如果没有科学上网肯定失败）</p></li><li><p>设置代理go env -w GOPROXY=<a href="https://goproxy.cn,direct(也有其他代理,可以上网查)/">https://goproxy.cn,direct（也有其他代理，可以上网查）</a></p></li><li><p>重启vs code，仍然提示上图。那么继续点击install all。这次全部成功，同时可以在go path路径下找到下载的gopls</p></li></ul><p><img src="/img/image-20210802221338830.png" alt="image-20210802221338830"></p><h4 id="go-mod环境："><a href="#go-mod环境：" class="headerlink" title="go mod环境："></a>go mod环境：</h4><p>简单测试下go可以运行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;@@@&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接下来新建文件夹以及文件employee.go</p><p><img src="/img/image-20210802221637262.png" alt="image-20210802221637262"></p><p>employee.go内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> employee<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>FirstName   <span class="hljs-keyword">string</span><br>LastName    <span class="hljs-keyword">string</span><br>TotalLeaves <span class="hljs-keyword">int</span><br>LeavesTaken <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Employee)</span> <span class="hljs-title">LeavesRemaining</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s %s has %d leaves remaining&quot;</span>, e.FirstName, e.LastName, (e.TotalLeaves - e.LeavesTaken))<br>&#125;<br><br></code></pre></td></tr></table></figure><p>main.go内容改为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;employee&quot;</span><br><span class="hljs-comment">//（后面修改为import &quot;test/employee&quot;，这里test为go mod init test的对应包名）</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>e := employee.Employee&#123;<br>FirstName:   <span class="hljs-string">&quot;Sam&quot;</span>,<br>LastName:    <span class="hljs-string">&quot;Adolf&quot;</span>,<br>TotalLeaves: <span class="hljs-number">30</span>,<br>LeavesTaken: <span class="hljs-number">20</span>,<br>&#125;<br>e.LeavesRemaining()<br>&#125;<br></code></pre></td></tr></table></figure><p>此时运行main.go失败，会提示包找不到（默认从GOROOT中找包），我们需要用go mod来管理新建的package employee。</p><p>在这个工作目录workspace命令窗口下执行<code>go mod init test</code>（test可以自己命名，同时注意会多出一个go.mod文件）,然后导入包修改为<code>import &quot;test/employee&quot;</code>这里的test必须和<code>go mod init test</code>创建的一致。最后运行Main.go成功（不截图了）。</p><p><img src="/img/image-20210802222315069.png" alt="image-20210802222315069"></p><p>到了这里，你已经配置好基本环境，也能够利用go mod来管理包了。接下来试一下如何import第三方包。</p><h4 id="外部包引用："><a href="#外部包引用：" class="headerlink" title="外部包引用："></a>外部包引用：</h4><p>修改main.go内容为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/jinzhu/configor&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;使用外部包测试：&quot;</span>, configor.Config&#123;&#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行提示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">main.<span class="hljs-keyword">go</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>: no required module provides <span class="hljs-keyword">package</span> github.com/jinzhu/configor; to add it:<br><br>  <span class="hljs-keyword">go</span> get github.com/jinzhu/configor<br></code></pre></td></tr></table></figure><p>好的，那么我们按照提示在vs code终端执行（也可以cmd执行）：<code>go get github.com/jinzhu/configor</code></p><p>在上文提到的go path路径下可以发现<code>github.com/jinzhu/configor</code>包成功下载到了本地。执行main.go成功，如下：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">hello world<br>使用外部包测试： &#123;  <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-number">0</span>s &lt;<span class="hljs-literal">nil</span>&gt; <span class="hljs-literal">false</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="附言："><a href="#附言：" class="headerlink" title="附言："></a>附言：</h4><p>网上很多说改vscode的setting.json，其实可以不用的，改setting.json无非就是改全局设置或者工作目录下新增一个作为单独用户配置，等有需要的时候再行设置即可。总的来说，现在go mod的包管理已经相比以前很优秀了。</p><p>另外，为啥我用vs code不用jetbrain呢？因为JetBrains已经成立中国公司捷并思了，万一哪天不让各位破解用，那还不如趁早熟悉免费的vs code。</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO的单元测试</title>
    <link href="/2021/08/02/GO%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/08/02/GO%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h4 id="关键点纪要"><a href="#关键点纪要" class="headerlink" title="关键点纪要"></a>关键点纪要</h4><ul><li><p>文件必须以  <code>_test.go</code>  结尾，函数名必须以  <code>Test</code>  开头。举栗子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">my2_test.<span class="hljs-keyword">go</span>，<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test2</span><span class="hljs-params">()</span></span>&#123;&#125;<br>my_test.<span class="hljs-keyword">go</span>, <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span>&#123;&#125;<br>特别注意，根据习惯，很容易犯错如下：<br>my_test2.<span class="hljs-keyword">go</span>, <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myTest</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">//注意这是错误的</span><br></code></pre></td></tr></table></figure></li><li><p>比如和测试代码同一个包</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">--websockets（文件夹）<br>    --client.<span class="hljs-keyword">go</span>(<span class="hljs-keyword">package</span> websockets)<br>    --clinet_test.<span class="hljs-keyword">go</span><br>    <span class="hljs-keyword">package</span> websockets<br>        <span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_client</span><span class="hljs-params">(t *testing.T)</span></span>&#123;<br>            <span class="hljs-comment">//测试client.go中的func</span><br>        &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>go test -v  my_test.go</code>  或者  <code>go test -v  .</code>   （注意-v可以打印详细测试结果）</p>  <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf">PS D:\go&gt; go test -v .\websockets\my_test.go<br>=== RUN   Test1<br>map[<span class="hljs-number">1012</span>:&#123;<span class="hljs-keyword">state</span>:&#123;NoUnkeyedLiterals:&#123;&#125; DoNotCompare:[] DoNotCopy:[] atomicMessageInfo:<span class="hljs-variable">&lt;nil&gt;</span>&#125; sizeCache:<span class="hljs-number">0</span> <span class="hljs-literal">unknown</span>Fields:[] PlotIds:[]&#125; <span class="hljs-number">9999</span>:&#123;<span class="hljs-keyword">state</span>:&#123;NoUnkeyedLiterals:&#123;&#125; DoNotCompare:[] DoNotCopy:[] atomicMessageInfo:<span class="hljs-variable">&lt;nil&gt;</span>&#125; sizeCache:<span class="hljs-number">0</span> <span class="hljs-literal">unknown</span>Fields:[] MessageId:<span class="hljs-variable">&lt;nil&gt;</span> ClientIndex:<span class="hljs-variable">&lt;nil&gt;</span> Data:[]&#125;]@<span class="hljs-comment">#@#@#--- PASS: Test1 (0.00s)</span><br>PASS<br>ok      command-line-arguments  <span class="hljs-number">0.106</span>s<br>PS D:\go&gt;<br></code></pre></td></tr></table></figure></li><li><p>在命令行中添加<code>-benchmem</code>参数以显示内存分配情况（暂时没有实操过）</p></li></ul><h4 id="建议收藏"><a href="#建议收藏" class="headerlink" title="建议收藏"></a>建议收藏</h4><p><a href="http://c.biancheng.net/view/124.html">http://c.biancheng.net/view/124.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/391478681">https://zhuanlan.zhihu.com/p/391478681</a></p><p>注意多利用单元测试来测试写的func，避免一直通过在main中调用测试，养成习惯！</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>户外履历</title>
    <link href="/2021/07/20/%E6%88%B7%E5%A4%96%E5%B1%A5%E5%8E%86/"/>
    <url>/2021/07/20/%E6%88%B7%E5%A4%96%E5%B1%A5%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h4 id="2017年11月–2020年7月"><a href="#2017年11月–2020年7月" class="headerlink" title="2017年11月–2020年7月"></a>2017年11月–2020年7月</h4><p>city walk为主，主要徒步路线：珠江新城–正佳广场–天河路–中山大道–骏景八匹马，约10公里。徒步时间常为9点过后至10点40左右，最晚徒步时间凌晨1点至3点。</p><h4 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h4><ul><li>7.11从化天堂顶</li><li>7.19从化鸡枕山</li><li>7.25星溪线，新鞋磨合拉练</li><li>8.8惠州大南山</li><li>8.29莫六公山</li><li>9.05从化桂峰山</li><li>9.12牛塘山，遇云海</li><li>9.26惠州罗浮山</li><li>10.11清远靘雾山</li><li>10.17夜路传说–惠州四方山</li><li>10.25惠州大南山</li><li>11.1城市夜徒21km+</li><li>11.06~07韶关k2–龙斗峰</li><li>11.28~29天上草原–黄梅雪后</li></ul><h4 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h4><ul><li>1.02~03天上草原–黄梅雪后，全广东最靓的景色</li><li>1.15夜徒20公里+</li><li>1.22夜徒20公里+</li><li>1.30白云嶂+银屏山双峰齐登</li><li>4.05~06大丹霞山穿越</li><li>5.01~03广东户外毕业典礼–船底顶罗新线</li><li>7.3从化三角髻</li><li>7.18从化三角山</li><li>9.04~9.05天上草原–黄梅雪后（很热，强度有点超标，三升水不够）</li></ul><h4 id="2023年"><a href="#2023年" class="headerlink" title="2023年"></a>2023年</h4><ul><li>6.28~6.29 江西武功山，沈子村–九龙山–铁蹄峰–金顶–景区下山</li></ul><h4 id="我想记住的名字"><a href="#我想记住的名字" class="headerlink" title="我想记住的名字"></a>我想记住的名字</h4><p>马姐、TAK、海哥、蚊、TT、大照、秋秋、橙子、三文鱼、鬼姐、七月、老李（卖火石）、温姐、小美（越野大神）</p>]]></content>
    
    
    
    <tags>
      
      <tag>户外</tag>
      
      <tag>登山</tag>
      
      <tag>徒步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pb数据的使用--游戏协议工具实战</title>
    <link href="/2021/07/20/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/07/20/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>其实之前已经用python实现过了（协议工具），最近又用go重构了一遍（刚入门go）。所以本篇会分别从go（详细讲）以及py(粗略讲)两方面讲叙。由于鄙人也是小小白，因此会讲的没那么高大上，尽可能俗一点，让其他刚进入游戏的老铁也能看个明白。</p><h4 id="背景分析："><a href="#背景分析：" class="headerlink" title="背景分析："></a>背景分析：</h4><ul><li><p>通讯协议是使用pb数据，而且没有做进一步的二次封装数据包。如果程序做进一步的数据包封装，去约定一些特定规则，加个头啊加个尾什么的，那么就需要去找程序了解这个规则了。</p></li><li><p>用户注册是另外的http服务</p></li><li><p>proto协议文件挺多的，而且内容指不定就变了</p></li></ul><h4 id="需求与方案制定："><a href="#需求与方案制定：" class="headerlink" title="需求与方案制定："></a>需求与方案制定：</h4><p>至少需要实现：从客户端那边log输出中复制所有“发送协议–&gt;&gt;XXX”协议内容，通过工具可以实现并发去创建多个账号并执行这些协议内容。</p><p>为了应对协议内容的增删改变化，决定偷懒，不一一通过原有协议数据执行序列化与反序列化，而是全部通过GM协议执行。好处是可以偷懒，不需要采用其他方式（比如动态import去导入对应需要的xx.pd.go），坏处是不能够对所有协议作反序列化。但是这个并不影响我的核心需求。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">CmdGMReqMsg</span> </span>&#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-built_in">string</span> command = <span class="hljs-number">1</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">CmdGMRspMsg</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来请看代码实战。</p><center><b><font color=black size=6>GO篇</font></b></center><h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><p>“net/http”包使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Get</span><span class="hljs-params">(yoururl <span class="hljs-keyword">string</span>, data <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>]<span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>request, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, yoururl, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//加入get参数</span><br>q := request.URL.Query()<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> data &#123;<br>q.Add(key, value)<br>&#125;<br>request.URL.RawQuery = q.Encode()<br>resp, err := http.DefaultClient.Do(request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>data1, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br>rdata := <span class="hljs-keyword">string</span>(data1)<br>result := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>err1 := json.Unmarshal([]<span class="hljs-keyword">byte</span>(rdata), &amp;result)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h4 id="proto文件处理"><a href="#proto文件处理" class="headerlink" title="proto文件处理"></a>proto文件处理</h4><p>最简单直接的办法，从官网直接拉protoc.exe文件，通过命令行转换即可。</p><p>举个栗子：</p><p><code>protoc --proto_path=..\\protos --python_out=..\\protos ..\\protos\XXX.proto</code></p><p>转换成go之后得到文件：XX.pb.go，接着如何根据协议内容创建结构体呢？稍微看一下官方例子就不难写出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Gmmsg</span><span class="hljs-params">(gm <span class="hljs-keyword">string</span>)</span> []<span class="hljs-title">byte</span></span> &#123;<br>gm_mess := &amp;pb.CmdGMReqMsg&#123;<br>Command: &amp;gm,<br>&#125;<br><span class="hljs-comment">//通过&quot;google.golang.org/protobuf/proto&quot;序列化</span><br>out, _ := proto.Marshal(gm_mess)<br><span class="hljs-keyword">return</span> out<br>&#125;<br></code></pre></td></tr></table></figure><p>我这边根据实际项目内容分析，协议最后都是嵌套作为message ClientCmdData中 data值，那么也不难写出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Clientmsg</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span> []<span class="hljs-title">byte</span></span> &#123;<br>clinetmsg := &amp;pb.ClientCmdData&#123;<br><span class="hljs-comment">//部分字段省略</span><br>Data:        data,<br>&#125;<br>out, _ := proto.Marshal(clinetmsg)<br><span class="hljs-keyword">return</span> out<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="websocket连接"><a href="#websocket连接" class="headerlink" title="websocket连接"></a>websocket连接</h4><p>主要使用包：<code>&quot;github.com/gorilla/websocket&quot;</code>。这个去github学习一下，基本都能写出基础的websocket链接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span> <span class="hljs-params">(c *websocket.Conn)</span></span> &#123;<br><span class="hljs-keyword">var</span> addr <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;冬天的秘密&quot;</span><br><span class="hljs-keyword">var</span> u = url.URL&#123;Scheme: <span class="hljs-string">&quot;ws&quot;</span>, Host: addr, Path: <span class="hljs-string">&quot;冬天的秘密&quot;</span>&#125;<br>c, _, err := websocket.DefaultDialer.Dial(u.String(), <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;dial:&quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;connecting to %s&quot;</span>, u.String())<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发送与接收，以及反序列化尝试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Send</span><span class="hljs-params">(t []<span class="hljs-keyword">byte</span>, c *websocket.Conn)</span> *<span class="hljs-title">pb</span>.<span class="hljs-title">ServerCmdData</span></span> &#123;<br>c.WriteMessage(websocket.BinaryMessage, t)<br>time.Sleep(<span class="hljs-number">500</span> * time.Millisecond)<br>_, message, _ := c.ReadMessage()<br>serdata := &amp;pb.ServerCmdData&#123;&#125;<br><span class="hljs-keyword">if</span> err := proto.Unmarshal(message, serdata); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(<span class="hljs-string">&quot;failed----------:&quot;</span>, err)<br>&#125;<br>    <span class="hljs-comment">//在我有需要的时候去掉注释，可以针对指定协议反序列化拿到服务器返回的数据</span><br><span class="hljs-comment">// if *serdata.MessageId == int32(协议号) &#123;</span><br><span class="hljs-comment">// temp := &amp;pb.XXXXX&#123;&#125;</span><br><span class="hljs-comment">// if err := proto.Unmarshal(serdata.Data, temp); err != nil &#123;</span><br><span class="hljs-comment">// log.Fatalln(&quot;failed----------:&quot;, err)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fmt.Printf(&quot;%+v#####&quot;, temp)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">return</span> serdata<br>&#125;<br></code></pre></td></tr></table></figure><p>上面注释代码举例了某个协议号的反序列化，得到反序列化后服务器的返回数据：<br><img src="/img/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B71.PNG"><br>实际游戏的所有协议反序列化则不再详叙。</p><p>另外可以根据需要，多加点实用的功能，比如我增加的：如果服务器处理协议失败可以重发10次，超过10次不管；协议数据中最多会涉及到一个变化的playerid，这个是需要根据实际注册账号得到的playerid的；还有其他小细节可以在工具使用过程中慢慢改善。</p><h4 id="协议Log内容处理"><a href="#协议Log内容处理" class="headerlink" title="协议Log内容处理"></a>协议Log内容处理</h4><p>处理从客户端复制下来的一大批协议内容：发送协议:&gt; XXXXXXX</p><p>这块主要涉及go文件处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Handfile</span><span class="hljs-params">()</span> <span class="hljs-params">(result []<span class="hljs-keyword">string</span>)</span></span> &#123;<br>file := <span class="hljs-string">&quot;冬天的秘密.log&quot;</span><br>f, err := os.Open(file)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err = f.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;()<br>s := bufio.NewScanner(f)<br><span class="hljs-keyword">for</span> s.Scan() &#123;<br>result = <span class="hljs-built_in">append</span>(result, s.Text())<br>&#125;<br>err = s.Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接收log内容，做一定处理（根据需要）然后发送；接收nickname，根据nickname注册并创建nickname游戏角色</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Handmess</span><span class="hljs-params">(nickname <span class="hljs-keyword">string</span>, mess []<span class="hljs-keyword">string</span>)</span></span> &#123;<br><span class="hljs-comment">//涉及协议内容格式，不敢放太多</span><br>con := connect()<br>loginmsg := Clientmsg(<span class="hljs-number">1001</span>, Loginmessage(token, accountid))<br>Resend(loginmsg, con)<br>registmsg := Clientmsg(<span class="hljs-number">1000</span>, Regist(nickname, token, accountid))<br>serverrsg := Resend(registmsg, con)<br><span class="hljs-keyword">if</span> !*serverrsg.Result &#123;<br>log.Printf(<span class="hljs-string">&quot;%s注册失败，该账号可能已经注册并在游戏中创建了账号(或者账号非法)&quot;</span>, nickname)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//省略mess处理与发送</span><br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>con.Close()<br>｝<br></code></pre></td></tr></table></figure><h4 id="go的并发（太香了）"><a href="#go的并发（太香了）" class="headerlink" title="go的并发（太香了）"></a>go的并发（太香了）</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Glimit <span class="hljs-keyword">struct</span> &#123;<br>    n <span class="hljs-keyword">int</span><br>    c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Glimit</span></span> &#123;<br>    <span class="hljs-keyword">return</span> &amp;Glimit&#123;<br>        n: n,<br>        c: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, n),<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Glimit)</span> <span class="hljs-title">Run</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>()</span>)</span> &#123;<br>    g.c &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        f()<br>        &lt;-g.c<br>    &#125;()<br>&#125;<br>g := New(<span class="hljs-number">20</span>)<br>log.Printf(<span class="hljs-string">&quot;start-------------&quot;</span>)<br>filemess := websockets_test.Handfile()<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">200</span>; i++ &#123;<br>    wg.Add(<span class="hljs-number">1</span>)<br>    value := strconv.Itoa(i)<br>    gofunc := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        websockets_test.Handmess(<span class="hljs-string">&quot;newnick&quot;</span>+value, filemess)<br>        log.Printf(<span class="hljs-string">&quot;end-------------%s&quot;</span>, <span class="hljs-string">&quot;newnick&quot;</span>+value)<br>        wg.Done()<br>    &#125;<br>    g.Run(gofunc)<br>&#125;<br>wg.Wait()<br>log.Printf(<span class="hljs-string">&quot;end-------------&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="实战结果"><a href="#实战结果" class="headerlink" title="实战结果"></a>实战结果</h4><p><img src="/img/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B72.PNG"><br>根据图中reg_time可以明确知道，我们的并发成功了，游戏中已经如实创建了我们想要的数据账号。快登录游戏享受吧！</p><center><b><font color=black size=6>Python篇</font></b></center><p>相信大伙的python都比我厉害，因此Python篇会简略一点。</p><ul><li>http请求用request</li><li>proto文件处理同go</li><li>websockets这个也不难</li><li>asyncio使用</li><li>log文件处理相信大家都会了</li><li>config文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#以下举例代码为多个文件代码，实际是分开在不同文件中的</span><br><span class="hljs-comment"># asyncio</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>():</span><br>    semaphore = asyncio.Semaphore(<span class="hljs-number">15</span>)<br>    to_get = [main_logic(i, semaphore) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num)]<br>    <span class="hljs-keyword">await</span> asyncio.wait(to_get)<br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(run())<br>    <span class="hljs-comment"># websockets</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> websockets.connect(_server_ws_url) <span class="hljs-keyword">as</span> ws:<br>        <span class="hljs-comment"># ws.close_timeout = 200</span><br>        <span class="hljs-keyword">await</span> send_message(XXXXXX)<br>    <span class="hljs-comment"># pd数据的引用</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clientmsg</span>(<span class="hljs-params">self, messageid, msg=<span class="hljs-literal">None</span></span>):</span><br>        cmsg = Cmd_pb2.ClientCmdData()<br>        cmsg.messageId = messageid<br>        cmsg.clientIndex = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> msg:<br>            cmsg.data = msg<br>        <span class="hljs-keyword">return</span> cmsg<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">[config]<br><span class="hljs-comment"># 服务器id</span><br>serverid = 冬天的秘密<br>_server_ws_url = 冬天的秘密<br><span class="hljs-comment"># 平台id</span><br>platformId = 冬天的秘密<br><span class="hljs-comment"># 你想要登录的账号，如果不存在会自动注册</span><br>nickname = nihao<br>start = <span class="hljs-number">39</span><br>num = <span class="hljs-number">1</span><br><span class="hljs-comment"># playerid（自增id），进阶功能，可以将协议数据中所有用到playerid替换为该player的正确playerid</span><br>playerid = 冬天的秘密<br>log = 高级账号.log<br></code></pre></td></tr></table></figure><p>另外还有一套配置用于jenkins：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        server = &#123;<br>            <span class="hljs-string">&quot;A服&quot;</span>: <span class="hljs-string">&#x27;冬天的秘密&#x27;</span>,<br>            <span class="hljs-string">&quot;B网&quot;</span>: <span class="hljs-string">&#x27;冬天的秘密&#x27;</span>,<br>        &#125;<br>        serverid = &#123;<br>            <span class="hljs-string">&quot;A服&quot;</span>: XXX,<br>            <span class="hljs-string">&quot;B网&quot;</span>: XX,<br>        &#125;<br>        platformId = &#123;<br>            <span class="hljs-string">&quot;A服&quot;</span>: XX,<br>            <span class="hljs-string">&quot;B网&quot;</span>: XX,<br>        &#125;<br>        log = &#123;<br>            <span class="hljs-string">&quot;高级账号&quot;</span>: <span class="hljs-string">&quot;D:/高级账号.log&quot;</span>,<br>            <span class="hljs-string">&quot;创建新号&quot;</span>: <span class="hljs-string">&quot;D:/创建新号.log&quot;</span>,<br>            <span class="hljs-string">&quot;XX&quot;</span>: <span class="hljs-string">&quot;D:/XX.log&quot;</span>,<br>        &#125;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.getenv(<span class="hljs-string">&quot;choice_server&quot;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你没有选择服务器！！！&quot;</span>)<br>            sys.exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.getenv(<span class="hljs-string">&quot;可选协议&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> os.getenv(<span class="hljs-string">&quot;protos&quot;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你没有填写任何协议内容！！！&quot;</span>)<br>            sys.exit(<span class="hljs-number">0</span>)<br>        self.serverid = serverid[os.getenv(<span class="hljs-string">&quot;choice_server&quot;</span>)]<br>        self.platformId = platformId[os.getenv(<span class="hljs-string">&quot;choice_server&quot;</span>)]<br>        gamename = re.split(<span class="hljs-string">r&#x27;\n&#x27;</span>,os.getenv(<span class="hljs-string">&quot;gamename&quot;</span>))<br>        self.nickname = gamename[<span class="hljs-number">0</span>]<br>        self.num = gamename[<span class="hljs-number">2</span>]<br>        self.start = gamename[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> os.getenv(<span class="hljs-string">&quot;可选协议&quot;</span>):<br>            self.log = linecache.getlines(log[os.getenv(<span class="hljs-string">&quot;可选协议&quot;</span>)])<br>        <span class="hljs-keyword">else</span>:<br>            self.log = re.split(<span class="hljs-string">r&#x27;\n&#x27;</span>, os.getenv(<span class="hljs-string">&quot;protos&quot;</span>))<br>        self._server_ws_url = server[os.getenv(<span class="hljs-string">&quot;choice_server&quot;</span>)]<br></code></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>将ws接受单独出来作为单独协程处理接受服务器数据，该协程写在ws创建连接之后func connect() (c *websocket.Conn) {}</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span> <span class="hljs-params">(c *websocket.Conn)</span></span> &#123;<br><span class="hljs-comment">//省略创建连接</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span>&#123;<br>        <span class="hljs-comment">//如果ws断开，则break</span><br>        <span class="hljs-comment">//否则根据协议id作对应反序列化处理</span><br>        <span class="hljs-comment">//写入log日志，记录服务器返回内容</span><br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B73.jpg"><br>同时把客户端发送的协议内容也一并写入Log日志，效果如上</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>游戏协议</tag>
      
      <tag>protobuf</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
